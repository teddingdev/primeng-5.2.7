{"version":3,"sources":["./src/app/components/spinner/spinner.ts","./src/app/showcase/components/spinner/spinnerdemo-routing.module.ts","./src/app/showcase/components/spinner/spinnerdemo.html","./src/app/showcase/components/spinner/spinnerdemo.module.ts","./src/app/showcase/components/spinner/spinnerdemo.ts"],"names":[],"mappings":"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","file":"spinnerdemo.module.chunk.js","sourcesContent":["import {NgModule,Component,ElementRef,OnInit,Input,Output,EventEmitter,forwardRef,ViewChild} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {InputTextModule} from '../inputtext/inputtext';\nimport {DomHandler} from '../dom/domhandler';\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\n\nexport const SPINNER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => Spinner),\n  multi: true\n};\n\n@Component({\n    selector: 'p-spinner',\n    template: `\n        <span class=\"ui-spinner ui-widget ui-corner-all\">\n            <input #inputfield [attr.type]=\"type\" [attr.id]=\"inputId\" [value]=\"valueAsString\" [attr.name]=\"name\"\n            [attr.size]=\"size\" [attr.maxlength]=\"maxlength\" [attr.tabindex]=\"tabindex\" [attr.placeholder]=\"placeholder\" [disabled]=\"disabled\" [attr.readonly]=\"readonly\" [attr.required]=\"required\"\n            (keydown)=\"onInputKeydown($event)\" (keyup)=\"onInputKeyup($event)\" (keypress)=\"onInputKeyPress($event)\" (blur)=\"onInputBlur($event)\" (change)=\"handleChange($event)\" (focus)=\"onInputFocus($event)\"\n            [ngStyle]=\"inputStyle\" [class]=\"inputStyleClass\" [ngClass]=\"'ui-spinner-input ui-inputtext ui-widget ui-state-default ui-corner-all'\">\n            <button type=\"button\" [ngClass]=\"{'ui-spinner-button ui-spinner-up ui-corner-tr ui-button ui-widget ui-state-default':true,'ui-state-disabled':disabled}\" [disabled]=\"disabled\" [attr.readonly]=\"readonly\"\n                (mouseleave)=\"onUpButtonMouseleave($event)\" (mousedown)=\"onUpButtonMousedown($event)\" (mouseup)=\"onUpButtonMouseup($event)\">\n                <span class=\"ui-spinner-button-icon fa fa-caret-up ui-clickable\"></span>\n            </button>\n            <button type=\"button\" [ngClass]=\"{'ui-spinner-button ui-spinner-down ui-corner-br ui-button ui-widget ui-state-default':true,'ui-state-disabled':disabled}\" [disabled]=\"disabled\" [attr.readonly]=\"readonly\"\n                (mouseleave)=\"onDownButtonMouseleave($event)\" (mousedown)=\"onDownButtonMousedown($event)\" (mouseup)=\"onDownButtonMouseup($event)\">\n                <span class=\"ui-spinner-button-icon fa fa-caret-down ui-clickable\"></span>\n            </button>\n        </span>\n    `,\n    host: {\n        '[class.ui-inputwrapper-filled]': 'filled',\n        '[class.ui-inputwrapper-focus]': 'focus'\n    },\n    providers: [DomHandler,SPINNER_VALUE_ACCESSOR]\n})\nexport class Spinner implements OnInit,ControlValueAccessor {\n    \n    @Output() onChange: EventEmitter<any> = new EventEmitter();\n    \n    @Output() onFocus: EventEmitter<any> = new EventEmitter();\n\n    @Output() onBlur: EventEmitter<any> = new EventEmitter();\n\n    @Input() step: number = 1;\n\n    @Input() min: number;\n\n    @Input() max: number;\n    \n    @Input() maxlength: number;\n    \n    @Input() size: number;\n\n    @Input() placeholder: string;\n\n    @Input() inputId: string;\n\n    @Input() disabled: boolean;\n    \n    @Input() readonly: boolean;\n    \n    @Input() decimalSeparator: string = '.';\n    \n    @Input() thousandSeparator: string = ',';\n\n    @Input() tabindex: number;\n    \n    @Input() formatInput: boolean = true;\n    \n    @Input() type: string = 'text';\n    \n    @Input() required: boolean;\n\n    @Input() name: string;\n\n    @Input() inputStyle: string;\n\n    @Input() inputStyleClass: string;\n    \n    value: number;\n    \n    valueAsString: string = '';\n    \n    onModelChange: Function = () => {};\n    \n    onModelTouched: Function = () => {};\n    \n    keyPattern: RegExp = /[0-9\\+\\-]/;\n    \n    public precision: number;\n    \n    public timer: any;\n    \n    public focus: boolean;\n    \n    public filled: boolean;\n    \n    public negativeSeparator = '-';\n    \n    @ViewChild('inputfield') inputfieldViewChild: ElementRef;\n    \n    constructor(public el: ElementRef, public domHandler: DomHandler) {}\n    \n    ngOnInit() {\n        if(Math.floor(this.step) === 0) {\n            this.precision = this.step.toString().split(/[,]|[.]/)[1].length;\n        }\n    }\n    \n    repeat(event: Event, interval: number, dir: number) {\n        let i = interval||500;\n\n        this.clearTimer();\n        this.timer = setTimeout(() => {\n            this.repeat(event, 40, dir);\n        }, i);\n\n        this.spin(event, dir);\n    }\n    \n    spin(event: Event, dir: number) {\n        let step = this.step * dir;\n        let currentValue = this.value||0;\n        let newValue: number = null;\n        \n        if(this.precision)\n            this.value = parseFloat(this.toFixed(currentValue + step, this.precision));\n        else\n            this.value = currentValue + step;\n    \n        if(this.maxlength !== undefined && this.value.toString().length > this.maxlength) {\n            this.value = currentValue;\n        }\n    \n        if(this.min !== undefined && this.value < this.min) {\n            this.value = this.min;\n        }\n\n        if(this.max !== undefined && this.value > this.max) {\n            this.value = this.max;\n        }\n        \n        this.formatValue();\n        this.onModelChange(this.value);\n        this.onChange.emit(event);\n    }\n    \n    toFixed(value: number, precision: number) {\n        let power = Math.pow(10, precision||0);\n        return String(Math.round(value * power) / power);\n    }\n    \n    onUpButtonMousedown(event: Event) {\n        if(!this.disabled) {\n            this.inputfieldViewChild.nativeElement.focus();\n            this.repeat(event, null, 1);\n            this.updateFilledState();\n            event.preventDefault();\n        }\n    }\n    \n    onUpButtonMouseup(event: Event) {\n        if(!this.disabled) {\n            this.clearTimer();\n        }\n    }\n    \n    onUpButtonMouseleave(event: Event) {\n        if(!this.disabled) {\n            this.clearTimer();\n        }\n    }\n    \n    onDownButtonMousedown(event: Event) {\n        if(!this.disabled) {\n            this.inputfieldViewChild.nativeElement.focus();\n            this.repeat(event, null, -1);\n            this.updateFilledState();\n            event.preventDefault();\n        }\n    }\n    \n    onDownButtonMouseup(event: Event) {\n        if(!this.disabled) {\n            this.clearTimer();\n        }\n    }\n    \n    onDownButtonMouseleave(event: Event) {\n        if(!this.disabled) {\n            this.clearTimer();\n        }\n    }\n    \n    onInputKeydown(event: KeyboardEvent) {\n        if(event.which == 38) {\n            this.spin(event, 1);\n            event.preventDefault();\n        }\n        else if(event.which == 40) {\n            this.spin(event, -1);\n            event.preventDefault();\n        }\n    }\n    \n    onInputKeyPress(event: KeyboardEvent) {\n        let inputChar = String.fromCharCode(event.charCode);\n        if(!this.keyPattern.test(inputChar) && inputChar != this.decimalSeparator && event.keyCode != 9 && event.keyCode != 8 && event.keyCode != 37 && event.keyCode != 39 && event.keyCode != 46) {\n            event.preventDefault();\n        }\n    }\n\n    onInputKeyup(event: KeyboardEvent) {\n        let inputValue = (<HTMLInputElement> event.target).value;\n        if (event.key !== this.decimalSeparator && event.key !== this.thousandSeparator && event.key !== this.negativeSeparator) {\n            this.value = this.parseValue(inputValue);\n            this.formatValue();\n        }\n    \n        this.onModelChange(this.value);\n        this.updateFilledState();\n    }\n    \n    onInputBlur(event) {\n        this.focus = false;\n        this.restrictValue();\n        this.onModelTouched();\n        this.onBlur.emit(event);\n    }\n    \n    onInputFocus(event) {\n        this.focus = true;\n        this.onFocus.emit(event);\n    }\n    \n    parseValue(val: string): number {\n        let value: number;\n        \n        if(this.formatInput) {\n            val = val.split(this.thousandSeparator).join('');\n        }\n        \n        if(val.trim() === '') {\n            value = null;\n        }\n        else {\n            if(this.precision) {\n                value = parseFloat(val.replace(',','.'));\n            }\n            else {\n                value = parseInt(val);\n            }\n            \n            if(isNaN(value)) {\n                value = null;\n            }\n        }\n        \n        return value;\n    }\n\n    restrictValue() {\n        let restricted: boolean;\n\n        if(this.max !== undefined && this.value > this.max) {\n            this.value = this.max;\n            restricted = true;\n        }\n        \n        if(this.min !== undefined && this.value < this.min) {\n            this.value = this.min;\n            restricted = true;\n        }\n\n        if(restricted) {\n            this.onModelChange(this.value);\n            this.formatValue();\n        }\n    }\n    \n    formatValue(): void {\n        if(this.value !== null && this.value !== undefined) {\n            let textValue = String(this.value).replace('.', this.decimalSeparator);\n            \n            if(this.formatInput) {\n                let parts = textValue.split(this.decimalSeparator);\n                parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, this.thousandSeparator);\n                textValue = parts.join(this.decimalSeparator);\n            }\n            \n            this.valueAsString = textValue;\n        }\n        else {\n            this.valueAsString = '';\n        }\n        \n        this.inputfieldViewChild.nativeElement.value = this.valueAsString;\n    }\n    \n    handleChange(event: Event) {\n        this.onChange.emit(event);\n    }\n    \n    clearTimer() {\n        if(this.timer) {\n            clearInterval(this.timer);\n        }\n    }\n    \n    writeValue(value: any) : void {\n        this.value = value;\n        this.formatValue();\n        this.updateFilledState();\n    }\n    \n    registerOnChange(fn: Function): void {\n        this.onModelChange = fn;\n    }\n\n    registerOnTouched(fn: Function): void {\n        this.onModelTouched = fn;\n    }\n    \n    setDisabledState(val: boolean): void {\n        this.disabled = val;\n    }\n    \n    updateFilledState() {\n        this.filled = (this.value !== undefined && this.value != null);\n    }\n}\n\n\n@NgModule({\n    imports: [CommonModule,InputTextModule],\n    exports: [Spinner],\n    declarations: [Spinner]\n})\nexport class SpinnerModule { }\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/components/spinner/spinner.ts","import {NgModule}     from '@angular/core';\nimport {RouterModule} from '@angular/router'\nimport {SpinnerDemo} from './spinnerdemo';\n\n@NgModule({\n\timports: [\n\t\tRouterModule.forChild([\n\t\t\t{path:'',component: SpinnerDemo}\n\t\t])\n\t],\n\texports: [\n\t\tRouterModule\n\t]\n})\nexport class SpinnerDemoRoutingModule {}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/showcase/components/spinner/spinnerdemo-routing.module.ts","module.exports = \"<div class=\\\"content-section introduction\\\">\\n    <div>\\n        <span class=\\\"feature-title\\\">Spinner</span>\\n        <span>Spinner is an input component to provide a numerical input.</span>\\n    </div>\\n</div>\\n\\n<div class=\\\"content-section implementation\\\">\\n    <h3 class=\\\"first\\\">Basic</h3>\\n    <p-spinner size=\\\"30\\\" [(ngModel)]=\\\"val1\\\"></p-spinner>\\n\\n    <h3>Min/Max</h3>\\n    <p-spinner size=\\\"30\\\" [(ngModel)]=\\\"val2\\\" [min]=\\\"0\\\" [max]=\\\"100\\\"></p-spinner>{{val2}}\\n\\n    <h3>Step</h3>\\n    <p-spinner size=\\\"30\\\" [(ngModel)]=\\\"val3\\\" [step]=\\\"0.25\\\"></p-spinner>\\n    \\n    <h3>Disabled</h3>\\n    <p-spinner size=\\\"30\\\" [(ngModel)]=\\\"val4\\\" [disabled]=\\\"true\\\"></p-spinner>\\n</div>\\n\\n<div class=\\\"content-section documentation\\\">\\n    <p-tabView effect=\\\"fade\\\">\\n        <p-tabPanel header=\\\"Documentation\\\">\\n            <h3>Import</h3>\\n<pre>\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\nimport &#123;SpinnerModule&#125; from 'primeng/spinner';\\n</code>\\n</pre>\\n\\n            <h3>Getting Started</h3>\\n            <p>Two-way value binding is defined using standard ngModel directive.</p>     \\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;p-spinner size=\\\"30\\\" [(ngModel)]=\\\"val\\\"&gt;&lt;/p-spinner&gt;\\n</code>\\n</pre>\\n\\n            <h3>Model Driven Forms</h3>\\n            <p>Spinner can be used in a model driven form as well.</p>\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;p-spinner formControlName=\\\"age\\\"&gt;&lt;/p-spinner&gt;\\n</code>\\n</pre>\\n\\n            <h3>Min-Max</h3>\\n            <p>Boundaries are specified with min and max attributes.</p>\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;p-spinner size=\\\"30\\\" [(ngModel)]=\\\"val\\\" [min]=\\\"0\\\" [max]=\\\"100\\\"&gt;&lt;/p-spinner&gt;\\n</code>\\n</pre>\\n\\n            <h3>Step</h3>\\n            <p>Step factor is 1 by default and can be customized with step option.</p>\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;p-spinner size=\\\"30\\\" [(ngModel)]=\\\"val\\\" [step]=\\\"0.25\\\"&gt;&lt;/p-spinner&gt;\\n</code>\\n</pre>\\n\\n            <h3>Properties</h3>\\n            <div class=\\\"doc-tablewrapper\\\">\\n                <table class=\\\"doc-table\\\">\\n                    <thead>\\n                        <tr>\\n                            <th>Name</th>\\n                            <th>Type</th>\\n                            <th>Default</th>\\n                            <th>Description</th>\\n                        </tr>\\n                    </thead>\\n                    <tbody>\\n                        <tr>\\n                            <td>step</td>\\n                            <td>number</td>\\n                            <td>1</td>\\n                            <td>Step factor to increment/decrement the value.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>min</td>\\n                            <td>number</td>\\n                            <td>null</td>\\n                            <td>Mininum boundary value.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>max</td>\\n                            <td>number</td>\\n                            <td>null</td>\\n                            <td>Maximum boundary value.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>placeholder</td>\\n                            <td>string</td>\\n                            <td>null</td>\\n                            <td>Hint text for the input field.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>disabled</td>\\n                            <td>boolean</td>\\n                            <td>undefined</td>\\n                            <td>When present, it specifies that the element should be disabled.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>readonly</td>\\n                            <td>boolean</td>\\n                            <td>undefined</td>\\n                            <td>When present, it specifies that the element should be read-only.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>maxlength</td>\\n                            <td>number</td>\\n                            <td>null</td>\\n                            <td>Maximum number of character allows in the input field.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>size</td>\\n                            <td>number</td>\\n                            <td>null</td>\\n                            <td>Size of the input field.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>decimalSeparator</td>\\n                            <td>string</td>\\n                            <td>.</td>\\n                            <td>Separator character for decimals.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>thousandSeparator</td>\\n                            <td>string</td>\\n                            <td>,</td>\\n                            <td>Separator character for thousands.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>tabindex</td>\\n                            <td>number</td>\\n                            <td>null</td>\\n                            <td>Index of the element in tabbing order.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>formatInput</td>\\n                            <td>boolean</td>\\n                            <td>true</td>\\n                            <td>When present, formats the user input.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>inputId</td>\\n                            <td>string</td>\\n                            <td>null</td>\\n                            <td>Identifier of the focus input to match a label defined for the component.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>type</td>\\n                            <td>string</td>\\n                            <td>text</td>\\n                            <td>Type of the input field.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>required</td>\\n                            <td>boolean</td>\\n                            <td>false</td>\\n                            <td>When present, it specifies that an input field must be filled out before submitting the form.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>name</td>\\n                            <td>string</td>\\n                            <td>null</td>\\n                            <td>Name of the input field.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>inputStyle</td>\\n                            <td>string</td>\\n                            <td>null</td>\\n                            <td>Inline style of the input field.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>inputStyleClass</td>\\n                            <td>string</td>\\n                            <td>null</td>\\n                            <td>Style class of the input field.</td>\\n                        </tr>\\n                    </tbody>\\n                </table>\\n            </div>\\n            \\n            <h3>Events</h3>\\n            <div class=\\\"doc-tablewrapper\\\">\\n                <table class=\\\"doc-table\\\">\\n                    <thead>\\n                        <tr>\\n                            <th>Name</th>\\n                            <th>Parameters</th>\\n                            <th>Description</th>\\n                        </tr>\\n                    </thead>\\n                    <tbody>\\n                        <tr>\\n                            <td>onBlur</td>\\n                            <td>event: Blur event</td>\\n                            <td>Callback to invoke when input loses focus.</td>\\n                        </tr>       \\n                        <tr>\\n                            <td>onFocus</td>\\n                            <td>event: Browser event</td>\\n                            <td>Callback to invoke when input gets focus.</td>\\n                        </tr>                 \\n                        <tr>\\n                            <td>onChange</td>\\n                            <td>event: Change event</td>\\n                            <td>Callback to invoke on value change.</td>\\n                        </tr>\\n                    </tbody>\\n                </table>\\n            </div>\\n\\n            <h3>Styling</h3>\\n            <p>Following is the list of structural style classes, for theming classes visit <a href=\\\"#\\\" [routerLink]=\\\"['/theming']\\\">theming page</a>.</p>\\n            <div class=\\\"doc-tablewrapper\\\">\\n                <table class=\\\"doc-table\\\">\\n                    <thead>\\n                        <tr>\\n                            <th>Name</th>\\n                            <th>Element</th>\\n                        </tr>\\n                    </thead>\\n                    <tbody>\\n                        <tr>\\n                            <td>ui-spinner</td>\\n                            <td>Container element</td>\\n                        </tr>\\n                        <tr>\\n                            <td>ui-spinner-up</td>\\n                            <td>Up element</td>\\n                        </tr>\\n                        <tr>\\n                            <td>ui-spinner-down</td>\\n                            <td>Down button</td>\\n                        </tr>\\n                    </tbody>\\n                </table>\\n            </div>\\n\\n            <h3>Dependencies</h3>\\n            <p>None.</p>\\n        </p-tabPanel>\\n\\n        <p-tabPanel header=\\\"Source\\\">\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/spinner\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\n                <i class=\\\"fa fa-github\\\"></i>\\n                <span>View on GitHub</span>\\n            </a>\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;h3 class=\\\"first\\\"&gt;Basic&lt;/h3&gt;\\n&lt;p-spinner size=\\\"30\\\" [(ngModel)]=\\\"val1\\\"&gt;&lt;/p-spinner&gt;\\n\\n&lt;h3&gt;Min/Max&lt;/h3&gt;\\n&lt;p-spinner size=\\\"30\\\" [(ngModel)]=\\\"val2\\\" [min]=\\\"0\\\" [max]=\\\"100\\\"&gt;&lt;/p-spinner&gt;\\n\\n&lt;h3&gt;Step&lt;/h3&gt;\\n&lt;p-spinner size=\\\"30\\\" [(ngModel)]=\\\"val3\\\" [step]=\\\"0.25\\\"&gt;&lt;/p-spinner&gt;\\n\\n&lt;h3&gt;Disabled&lt;/h3&gt;\\n&lt;p-spinner size=\\\"30\\\" [(ngModel)]=\\\"val4\\\" [disabled]=\\\"true\\\"&gt;&lt;/p-spinner&gt;\\n</code>\\n</pre>\\n\\n<pre>\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\nexport class SpinnerDemo &#123;\\n\\n    val1: number;\\n\\n    val2: number;\\n\\n    val3: number;\\n\\n    val4: number = 100;\\n    \\n&#125;\\n</code>\\n</pre>\\n        </p-tabPanel>\\n    </p-tabView>\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/showcase/components/spinner/spinnerdemo.html\n// module id = ./src/app/showcase/components/spinner/spinnerdemo.html\n// module chunks = spinnerdemo.module","import {NgModule}     from '@angular/core';\nimport {CommonModule} from '@angular/common'\nimport {FormsModule}  from '@angular/forms';;\nimport {SpinnerDemo} from './spinnerdemo';\nimport {SpinnerDemoRoutingModule} from './spinnerdemo-routing.module';\nimport {SpinnerModule} from '../../../components/spinner/spinner';\nimport {TabViewModule} from '../../../components/tabview/tabview';\nimport {CodeHighlighterModule} from '../../../components/codehighlighter/codehighlighter';\n\n@NgModule({\n\timports: [\n\t\tCommonModule,\n        FormsModule,\n\t\tSpinnerDemoRoutingModule,\n        SpinnerModule,\n        TabViewModule,\n        CodeHighlighterModule\n\t],\n\tdeclarations: [\n\t\tSpinnerDemo\n\t]\n})\nexport class SpinnerDemoModule {}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/showcase/components/spinner/spinnerdemo.module.ts","import {Component} from '@angular/core';\n\n@Component({\n    templateUrl: './spinnerdemo.html'\n})\nexport class SpinnerDemo {\n\n    val1: number;\n\n    val2: number;\n\n    val3: number;\n\n    val4: number = 100;\n}\n\n\n// WEBPACK FOOTER //\n// ./src/app/showcase/components/spinner/spinnerdemo.ts"],"sourceRoot":"webpack:///"}