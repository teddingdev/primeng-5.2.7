{"version":3,"sources":["./src/app/components/chips/chips.ts","./src/app/showcase/components/chips/chipsdemo-routing.module.ts","./src/app/showcase/components/chips/chipsdemo.html","./src/app/showcase/components/chips/chipsdemo.module.ts","./src/app/showcase/components/chips/chipsdemo.ts"],"names":[],"mappings":"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","file":"chipsdemo.module.chunk.js","sourcesContent":["import {NgModule,Component,ElementRef,Input,Output,EventEmitter,AfterContentInit,ContentChildren,QueryList,TemplateRef,IterableDiffers,forwardRef,ViewChild} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {SharedModule,PrimeTemplate} from '../common/shared';\nimport {InputTextModule} from '../inputtext/inputtext';\nimport {DomHandler} from '../dom/domhandler';\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\n\nexport const CHIPS_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => Chips),\n  multi: true\n};\n\n@Component({\n    selector: 'p-chips',\n    template: `\n        <div [ngClass]=\"'ui-chips ui-widget'\" [ngStyle]=\"style\" [class]=\"styleClass\" (click)=\"onClick($event)\">\n            <ul [ngClass]=\"{'ui-inputtext ui-state-default ui-corner-all':true,'ui-state-focus':focus,'ui-state-disabled':disabled}\">\n                <li #token *ngFor=\"let item of value; let i = index;\" class=\"ui-chips-token ui-state-highlight ui-corner-all\">\n                    <span *ngIf=\"!disabled\" class=\"ui-chips-token-icon fa fa-fw fa-close\" (click)=\"removeItem($event,i)\"></span>\n                    <span *ngIf=\"!itemTemplate\" class=\"ui-chips-token-label\">{{field ? resolveFieldData(item,field) : item}}</span>\n                    <ng-container *ngTemplateOutlet=\"itemTemplate; context: {$implicit: item}\"></ng-container>\n                </li>\n                <li class=\"ui-chips-input-token\">\n                    <input #inputtext type=\"text\" [attr.id]=\"inputId\" [attr.placeholder]=\"(value && value.length ? null : placeholder)\" [attr.tabindex]=\"tabindex\" (keydown)=\"onKeydown($event)\" \n                        (focus)=\"onInputFocus($event)\" (blur)=\"onInputBlur($event)\" [disabled]=\"disabled\" [ngStyle]=\"inputStyle\" [class]=\"inputStyleClass\">\n                </li>\n            </ul>\n        </div>\n    `,\n    providers: [DomHandler,CHIPS_VALUE_ACCESSOR]\n})\nexport class Chips implements AfterContentInit,ControlValueAccessor {\n\n    @Input() style: any;\n\n    @Input() styleClass: string;\n    \n    @Input() disabled: boolean;\n\n    @Output() onAdd: EventEmitter<any> = new EventEmitter();\n    \n    @Output() onRemove: EventEmitter<any> = new EventEmitter();\n    \n    @Input() field: string;\n    \n    @Input() placeholder: string;\n    \n    @Input() max: number;\n\n    @Input() tabindex: number;\n\n    @Input() inputId: string;\n    \n    @Input() allowDuplicate: boolean = true;\n    \n    @Input() inputStyle: any;\n    \n    @Input() inputStyleClass: any;\n    \n    @Input() addOnTab: boolean;\n\n    @Input() addOnBlur: boolean;\n\n    @Output() onFocus: EventEmitter<any> = new EventEmitter();\n    \n    @Output() onBlur: EventEmitter<any> = new EventEmitter();\n\n    @ViewChild('inputtext') inputViewChild: ElementRef;\n    \n    @ContentChildren(PrimeTemplate) templates: QueryList<any>;\n    \n    public itemTemplate: TemplateRef<any>;\n        \n    value: any;\n    \n    onModelChange: Function = () => {};\n    \n    onModelTouched: Function = () => {};\n        \n    valueChanged: boolean;\n    \n    focus: boolean;\n            \n    constructor(public el: ElementRef, public domHandler: DomHandler) {}\n    \n    ngAfterContentInit() {\n        this.templates.forEach((item) => {\n            switch(item.getType()) {\n                case 'item':\n                    this.itemTemplate = item.template;\n                break;\n                \n                default:\n                    this.itemTemplate = item.template;\n                break;\n            }\n        });\n    }\n    \n    onClick(event) {\n        this.inputViewChild.nativeElement.focus();\n    }\n\n    writeValue(value: any) : void {\n        this.value = value;\n        this.updateMaxedOut();\n    }\n    \n    registerOnChange(fn: Function): void {\n        this.onModelChange = fn;\n    }\n\n    registerOnTouched(fn: Function): void {\n        this.onModelTouched = fn;\n    }\n    \n    setDisabledState(val: boolean): void {\n        this.disabled = val;\n    }\n    \n    resolveFieldData(data: any, field: string): any {\n        if(data && field) {\n            if(field.indexOf('.') == -1) {\n                return data[field];\n            }\n            else {\n                let fields: string[] = field.split('.');\n                let value = data;\n                for(var i = 0, len = fields.length; i < len; ++i) {\n                    value = value[fields[i]];\n                }\n                return value;\n            }\n        }\n        else {\n            return null;\n        }\n    }\n    \n    onInputFocus(event: FocusEvent) {\n        this.focus = true;\n        this.onFocus.emit(event);\n    }\n\n    onInputBlur(event: FocusEvent) {\n        this.focus = false;\n        if(this.addOnBlur && this.inputViewChild.nativeElement.value) {\n            this.addItem(event, this.inputViewChild.nativeElement.value);\n            this.inputViewChild.nativeElement.value = '';\n        }\n        this.onModelTouched();\n        this.onBlur.emit(event);\n    }\n    \n    removeItem(event: Event, index: number): void {\n        if(this.disabled) {\n            return;\n        }\n        \n        let removedItem = this.value[index];\n        this.value = this.value.filter((val, i) => i!=index);\n        this.onModelChange(this.value);\n        this.onRemove.emit({\n            originalEvent: event,\n            value: removedItem\n        });\n        this.updateMaxedOut();\n    }\n    \n    addItem(event: Event, item: string): void {\n        this.value = this.value||[];\n        if(item && item.trim().length) {\n            if(this.allowDuplicate || this.value.indexOf(item) === -1) {\n                this.value = [...this.value, item];\n                this.onModelChange(this.value);\n                this.onAdd.emit({\n                    originalEvent: event,\n                    value: item\n                });\n            }\n        }\n        this.updateMaxedOut();\n    }\n    \n    onKeydown(event: KeyboardEvent): void {\n        switch(event.which) {\n            //backspace\n            case 8:\n                if(this.inputViewChild.nativeElement.value.length === 0 && this.value && this.value.length > 0) {\n                    this.value = [...this.value];\n                    let removedItem = this.value.pop();\n                    this.onModelChange(this.value);\n                    this.onRemove.emit({\n                        originalEvent: event,\n                        value: removedItem\n                    });\n                }\n            break;\n            \n            //enter\n            case 13:\n                this.addItem(event, this.inputViewChild.nativeElement.value);\n                this.inputViewChild.nativeElement.value = '';\n                \n                event.preventDefault();\n            break;\n            \n            case 9:\n                if(this.addOnTab && this.inputViewChild.nativeElement.value !== '') {\n                    this.addItem(event, this.inputViewChild.nativeElement.value);\n                    this.inputViewChild.nativeElement.value = '';\n\n                    event.preventDefault();\n                }\n            break;\n            \n            default:\n                if(this.max && this.value && this.max === this.value.length) {\n                    event.preventDefault();\n                }\n            break;\n        }\n    }\n    \n    updateMaxedOut() {\n        if(this.inputViewChild && this.inputViewChild.nativeElement) {\n            if(this.max && this.value && this.max === this.value.length)\n                this.inputViewChild.nativeElement.disabled = true;\n            else\n            this.inputViewChild.nativeElement.disabled = false;\n        }\n    }\n}\n\n@NgModule({\n    imports: [CommonModule,InputTextModule,SharedModule],\n    exports: [Chips,InputTextModule,SharedModule],\n    declarations: [Chips]\n})\nexport class ChipsModule { }\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/components/chips/chips.ts","import {NgModule}     from '@angular/core';\nimport {RouterModule} from '@angular/router'\nimport {ChipsDemo} from './chipsdemo';\n\n@NgModule({\n\timports: [\n\t\tRouterModule.forChild([\n\t\t\t{path:'',component: ChipsDemo}\n\t\t])\n\t],\n\texports: [\n\t\tRouterModule\n\t]\n})\nexport class ChipsDemoRoutingModule {}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/showcase/components/chips/chipsdemo-routing.module.ts","module.exports = \"<div class=\\\"content-section introduction\\\">\\n    <div>\\n        <span class=\\\"feature-title\\\">Chips</span>\\n        <span>Chips is used to enter multiple values on an inputfield.</span>\\n    </div>\\n</div>\\n\\n<div class=\\\"content-section implementation\\\">\\n    <h3 class=\\\"first\\\">Basic</h3>\\n    <p-chips [(ngModel)]=\\\"values1\\\"></p-chips>\\n    \\n    <h3>Template</h3>\\n    <p-chips [(ngModel)]=\\\"values2\\\">\\n        <ng-template let-item pTemplate=\\\"item\\\">\\n            {{item}} - (active) <i class=\\\"fa fa-user\\\" style=\\\"margin-right:2em\\\"></i>\\n        </ng-template>\\n    </p-chips>\\n</div>\\n\\n<div class=\\\"content-section documentation\\\">\\n    <p-tabView effect=\\\"fade\\\">\\n        <p-tabPanel header=\\\"Documentation\\\">\\n            <h3>Import</h3>\\n<pre>\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\nimport &#123;ChipsModule&#125; from 'primeng/chips';\\n</code>\\n</pre>\\n\\n            <h3>Getting Started</h3>\\n            <p>Chips requires an array as its model.</p>\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;p-chips [(ngModel)]=\\\"values\\\"&gt;&lt;/p-chips&gt;\\n</code>\\n</pre>\\n\\n<pre>\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\nexport class MyModel &#123;\\n\\n    values: string[];\\n\\n&#125;\\n</code>\\n</pre>\\n            <h3>Model Driven Forms</h3>\\n            <p>Chips can be used in a model driven form as well.</p>\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;p-chips formControlName=\\\"cities\\\"&gt;&lt;/p-chips&gt;\\n</code>\\n</pre>\\n\\n            <h3>Custom Content</h3>\\n            <p>A chip is customized using a ng-template element where the value is passed as the implicit variable.</p>\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;p-chips [(ngModel)]=\\\"values\\\"&gt;\\n    &lt;ng-template let-item pTemplate=\\\"item\\\"&gt;\\n        &#123;&#123;item&#125;&#125; - (active) &lt;i class=\\\"fa fa-user\\\"&gt;&lt;/i&gt;\\n    &lt;/ng-template&gt;\\n&lt;/p-chips&gt;\\n</code>\\n</pre>\\n            <h3>Properties</h3>\\n            <div class=\\\"doc-tablewrapper\\\">\\n                <table class=\\\"doc-table\\\">\\n                    <thead>\\n                    <tr>\\n                        <th>Name</th>\\n                        <th>Type</th>\\n                        <th>Default</th>\\n                        <th>Description</th>\\n                    </tr>\\n                    </thead>\\n                    <tbody>\\n                        <tr>\\n                            <td>field</td>\\n                            <td>string</td>\\n                            <td>null</td>\\n                            <td>Name of the property to display on a chip.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>max</td>\\n                            <td>number</td>\\n                            <td>null</td>\\n                            <td>Maximum number of entries allowed.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>disabled</td>\\n                            <td>boolean</td>\\n                            <td>false</td>\\n                            <td>When present, it specifies that the element should be disabled.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>style</td>\\n                            <td>string</td>\\n                            <td>null</td>\\n                            <td>Inline style of the element.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>styleClass</td>\\n                            <td>string</td>\\n                            <td>null</td>\\n                            <td>Style class of the element.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>placeholder</td>\\n                            <td>string</td>\\n                            <td>null</td>\\n                            <td>Advisory information to display on input.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>tabindex</td>\\n                            <td>number</td>\\n                            <td>null</td>\\n                            <td>Index of the element in tabbing order.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>inputId</td>\\n                            <td>string</td>\\n                            <td>null</td>\\n                            <td>Identifier of the focus input to match a label defined for the component.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>allowDuplicate</td>\\n                            <td>boolean</td>\\n                            <td>true</td>\\n                            <td>Whether to allow duplicate values or not.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>inputStyle</td>\\n                            <td>string</td>\\n                            <td>null</td>\\n                            <td>Inline style of the input field.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>inputStyleClass</td>\\n                            <td>string</td>\\n                            <td>null</td>\\n                            <td>Style class of the input field.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>addOnTab</td>\\n                            <td>boolean</td>\\n                            <td>false</td>\\n                            <td>Whether to add an item on tab key press.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>addOnBlur</td>\\n                            <td>boolean</td>\\n                            <td>false</td>\\n                            <td>Whether to add an item when the input loses focus.</td>\\n                        </tr>\\n                    </tbody>\\n                </table>\\n            </div>\\n\\n            <h3>Events</h3>\\n            <div class=\\\"doc-tablewrapper\\\">\\n                <table class=\\\"doc-table\\\">\\n                    <thead>\\n                    <tr>\\n                        <th>Name</th>\\n                        <th>Parameters</th>\\n                        <th>Description</th>\\n                    </tr>\\n                    </thead>\\n                    <tbody>\\n                        <tr>\\n                            <td>onAdd</td>\\n                            <td>originalEvent: Browser event <br >\\n                                value: Added item value\\n                            </td>\\n                            <td>Callback to invoke when a value is added.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>onRemove</td>\\n                            <td>originalEvent: Browser event <br >\\n                                value: Added item value\\n                            </td>\\n                            <td>Callback to invoke when a value is removed.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>onFocus</td>\\n                            <td>originalEvent: Browser event</td>\\n                            <td>Callback to invoke when a input is focused.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>onBlur</td>\\n                            <td>originalEvent: Browser event</td>\\n                            <td>Callback to invoke when a input loses focus.</td>\\n                        </tr>\\n                    </tbody>\\n                </table>\\n            </div>\\n\\n            <h3>Styling</h3>\\n            <p>Following is the list of structural style classes, for theming classes visit <a href=\\\"#\\\" [routerLink]=\\\"['/theming']\\\">theming page</a>.</p>\\n            <div class=\\\"doc-tablewrapper\\\">\\n                <table class=\\\"doc-table\\\">\\n                    <thead>\\n                        <tr>\\n                            <th>Name</th>\\n                            <th>Element</th>\\n                        </tr>\\n                    </thead>\\n                    <tbody>\\n                        <tr>\\n                            <td>ui-chips</td>\\n                            <td>Container element.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>ui-chips-token</td>\\n                            <td>Chip element container.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>ui-chips-token-icon</td>\\n                            <td>Icon of a chip.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>ui-chips-token-label</td>\\n                            <td>Label of a chip.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>ui-chips-input-token</td>\\n                            <td>Container of input element.</td>\\n                        </tr>\\n                    </tbody>\\n                </table>\\n            </div>\\n\\n            <h3>Dependencies</h3>\\n            <p>None.</p>\\n        </p-tabPanel>\\n\\n        <p-tabPanel header=\\\"Source\\\">\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/chips\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\n                <i class=\\\"fa fa-github\\\"></i>\\n                <span>View on GitHub</span>\\n            </a>\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;h3 class=\\\"first\\\"&gt;Basic&lt;/h3&gt;\\n&lt;p-chips [(ngModel)]=\\\"values1\\\" &gt;&lt;/p-chips&gt;\\n\\n&lt;h3&gt;ng-template&lt;/h3&gt;\\n&lt;p-chips [(ngModel)]=\\\"values2\\\"&gt;\\n    &lt;ng-template let-item pTemplate=\\\"item\\\"&gt;\\n        &#123;&#123;item&#125;&#125; - (active) &lt;i class=\\\"fa fa-user\\\" style=\\\"margin-right:2em\\\"&gt;&lt;/i&gt;\\n    &lt;/ng-template&gt;\\n&lt;/p-chips&gt;\\n</code>\\n</pre>\\n\\n<pre>\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\nexport class ChipsDemo &#123;\\n\\n    values1: string[];\\n    \\n    values2: string[];\\n&#125;\\n</code>\\n</pre>\\n        </p-tabPanel>\\n    </p-tabView>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/showcase/components/chips/chipsdemo.html\n// module id = ./src/app/showcase/components/chips/chipsdemo.html\n// module chunks = chipsdemo.module","import {NgModule}     from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormsModule}    from '@angular/forms';\nimport {ChipsDemo} from './chipsdemo';\nimport {ChipsDemoRoutingModule} from './chipsdemo-routing.module';\nimport {ChipsModule} from '../../../components/chips/chips';\nimport {ButtonModule} from '../../../components/button/button';\nimport {TabViewModule} from '../../../components/tabview/tabview';\nimport {CodeHighlighterModule} from '../../../components/codehighlighter/codehighlighter';\n\n@NgModule({\n\timports: [\n\t\tCommonModule,\n        FormsModule,\n\t\tChipsDemoRoutingModule,\n        ChipsModule,\n        ButtonModule,\n        TabViewModule,\n        CodeHighlighterModule\n\t],\n\tdeclarations: [\n\t\tChipsDemo\n\t]\n})\nexport class ChipsDemoModule {}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/showcase/components/chips/chipsdemo.module.ts","import {Component} from '@angular/core';\n\n@Component({\n    templateUrl: './chipsdemo.html'\n})\nexport class ChipsDemo {\n\n    values1: string[];\n    \n    values2: string[];\n}\n\n\n// WEBPACK FOOTER //\n// ./src/app/showcase/components/chips/chipsdemo.ts"],"sourceRoot":"webpack:///"}