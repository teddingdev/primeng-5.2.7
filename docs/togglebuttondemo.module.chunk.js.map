{"version":3,"sources":["./src/app/components/togglebutton/togglebutton.ts","./src/app/showcase/components/togglebutton/togglebuttondemo-routing.module.ts","./src/app/showcase/components/togglebutton/togglebuttondemo.html","./src/app/showcase/components/togglebutton/togglebuttondemo.module.ts","./src/app/showcase/components/togglebutton/togglebuttondemo.ts"],"names":[],"mappings":"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","file":"togglebuttondemo.module.chunk.js","sourcesContent":["import {NgModule,Component,Input,Output,EventEmitter,forwardRef,AfterViewInit,ViewChild,ElementRef} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\n\nexport const TOGGLEBUTTON_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => ToggleButton),\n  multi: true\n};\n\n@Component({\n    selector: 'p-toggleButton',\n    template: `\n        <div [ngClass]=\"{'ui-button ui-togglebutton ui-widget ui-state-default ui-corner-all': true, 'ui-button-text-only': (!onIcon&&!offIcon), \n                'ui-button-text-icon-left': (onIcon&&offIcon&&hasOnLabel&&hasOffLabel), 'ui-button-icon-only': (onIcon&&offIcon&&!hasOnLabel&&!hasOffLabel),\n                'ui-state-active': checked,'ui-state-focus':focus,'ui-state-disabled':disabled}\" [ngStyle]=\"style\" [class]=\"styleClass\" \n                (click)=\"toggle($event)\">\n            <div class=\"ui-helper-hidden-accessible\">\n                <input #checkbox type=\"checkbox\" [attr.id]=\"inputId\" [checked]=\"checked\" (focus)=\"onFocus()\" (blur)=\"onBlur()\" [attr.tabindex]=\"tabindex\">\n            </div>\n            <span *ngIf=\"onIcon||offIcon\" [class]=\"getIconClass()\"></span>\n            <span class=\"ui-button-text ui-unselectable-text\">{{checked ? hasOnLabel ? onLabel : 'ui-btn' : hasOffLabel ? offLabel : 'ui-btn'}}</span>\n        </div>\n    `,\n    providers: [TOGGLEBUTTON_VALUE_ACCESSOR]\n})\nexport class ToggleButton implements ControlValueAccessor,AfterViewInit {\n\n    @Input() onLabel: string = 'Yes';\n\n    @Input() offLabel: string = 'No';\n\n    @Input() onIcon: string;\n\n    @Input() offIcon: string;\n\n    @Input() disabled: boolean;\n\n    @Input() style: any;\n\n    @Input() styleClass: string;\n\n    @Input() inputId: string;\n\n    @Input() tabindex: number;\n\n    @Output() onChange: EventEmitter<any> = new EventEmitter();\n    \n    @ViewChild('checkbox') checkboxViewChild: ElementRef;\n    \n    checkbox: HTMLInputElement;\n    \n    checked: boolean = false;\n\n    focus: boolean = false;\n    \n    onModelChange: Function = () => {};\n    \n    onModelTouched: Function = () => {};\n    \n    ngAfterViewInit() {\n        this.checkbox = <HTMLInputElement> this.checkboxViewChild.nativeElement;\n    }\n\n    getIconClass() {\n        let baseClass = 'ui-button-icon-left ui-togglebutton-icon fa fa-fw';\n        return baseClass + ' ' + (this.checked ? this.onIcon : this.offIcon);\n    }\n    \n    toggle(event: Event) {\n        if(!this.disabled) {\n            this.checked = !this.checked;\n            this.onModelChange(this.checked);\n            this.onModelTouched();\n            this.onChange.emit({\n                originalEvent: event,\n                checked: this.checked\n            });\n            this.checkbox.focus();\n        }\n    }\n\n    onFocus() {\n        this.focus = true;\n    }\n    \n    onBlur() {\n        this.focus = false;\n        this.onModelTouched();\n    }\n    \n    writeValue(value: any) : void {\n        this.checked = value;\n    }\n    \n    registerOnChange(fn: Function): void {\n        this.onModelChange = fn;\n    }\n\n    registerOnTouched(fn: Function): void {\n        this.onModelTouched = fn;\n    }\n    \n    setDisabledState(val: boolean): void {\n        this.disabled = val;\n    }\n    \n    get hasOnLabel():boolean {\n        return this.onLabel && this.onLabel.length > 0;\n    }\n    \n    get hasOffLabel():boolean {\n        return this.onLabel && this.onLabel.length > 0;\n    }\n}\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [ToggleButton],\n    declarations: [ToggleButton]\n})\nexport class ToggleButtonModule { }\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/components/togglebutton/togglebutton.ts","import {NgModule}     from '@angular/core';\nimport {RouterModule} from '@angular/router'\nimport {ToggleButtonDemo} from './togglebuttondemo';\n\n@NgModule({\n\timports: [\n\t\tRouterModule.forChild([\n\t\t\t{path:'',component: ToggleButtonDemo}\n\t\t])\n\t],\n\texports: [\n\t\tRouterModule\n\t]\n})\nexport class ToggleButtonDemoRoutingModule {}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/showcase/components/togglebutton/togglebuttondemo-routing.module.ts","module.exports = \"<div class=\\\"content-section introduction\\\">\\n    <div>\\n        <span class=\\\"feature-title\\\">Togglebutton</span>\\n        <span>ToggleButton is used to select a boolean value using a button.</span>\\n    </div>\\n</div>\\n\\n<div class=\\\"content-section implementation\\\">\\n    <h3 class=\\\"first\\\">Basic - ({{checked1}})</h3>\\n    <p-toggleButton [(ngModel)]=\\\"checked1\\\" [style]=\\\"{'width':'150px'}\\\"></p-toggleButton>\\n\\n    <h3>Customized - ({{checked2}})</h3>\\n    <p-toggleButton [(ngModel)]=\\\"checked2\\\" onLabel=\\\"I confirm\\\" offLabel=\\\"I reject\\\" onIcon=\\\"fa-check-square\\\" offIcon=\\\"fa-square\\\" [style]=\\\"{'width':'150px'}\\\"></p-toggleButton>\\n</div>\\n\\n<div class=\\\"content-section documentation\\\">\\n    <p-tabView effect=\\\"fade\\\">\\n        <p-tabPanel header=\\\"Documentation\\\">\\n            <h3>Import</h3>\\n<pre>\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\nimport &#123;ToggleButtonModule&#125; from 'primeng/togglebutton';\\n</code>\\n</pre>\\n\\n            <h3>Getting Started</h3>\\n            <p>Two-way binding to a boolean property is defined using the standard ngModel directive.</p>\\n\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;p-toggleButton [(ngModel)]=\\\"checked\\\"&gt;&lt;/p-toggleButton&gt;\\n</code>\\n</pre>\\n\\n<pre>\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\nexport class ModelComponent &#123;\\n\\n    checked: boolean;\\n\\n&#125;\\n</code>\\n</pre>\\n\\n            <p>As model is two-way binding enabled, setting the bound value as true displays the state as checked.</p>\\n<pre>\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\nexport class ModelComponent &#123;\\n\\n   checked: boolean = true;\\n\\n&#125;\\n</code>\\n</pre>\\n\\n            <h3>Model Driven Forms</h3>\\n            <p>ToggleButton can be used in a model driven form as well.</p>\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;p-toggleButton formControlName=\\\"agreed\\\"&gt;&lt;/p-toggleButton&gt;\\n</code>\\n</pre>\\n\\n            <h3>Customization</h3>\\n            <p>Icons and Labels can be customized using onLabel, offLabel, onIcon and offIcon attributes.</p>\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;p-toggleButton onLabel=\\\"I confirm\\\" offLabel=\\\"I reject\\\"\\n        onIcon=\\\"fa-check-square\\\" offIcon=\\\"fa-square\\\" [(ngModel)]=\\\"val\\\"&gt;&lt;/p-toggleButton&gt;\\n</code>\\n</pre>\\n\\n            <h3>Properties</h3>\\n            <div class=\\\"doc-tablewrapper\\\">\\n                <table class=\\\"doc-table\\\">\\n                    <thead>\\n                        <tr>\\n                            <th>Name</th>\\n                            <th>Type</th>\\n                            <th>Default</th>\\n                            <th>Description</th>\\n                        </tr>\\n                    </thead>\\n                    <tbody>\\n                         <tr>\\n                            <td>onLabel</td>\\n                            <td>string</td>\\n                            <td>Yes</td>\\n                            <td>Label for the on state.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>offLabel</td>\\n                            <td>string</td>\\n                            <td>No</td>\\n                            <td>Label for the off state.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>onIcon</td>\\n                            <td>string</td>\\n                            <td>null</td>\\n                            <td>Icon for the on state.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>offIcon</td>\\n                            <td>string</td>\\n                            <td>null</td>\\n                            <td>Icon for the off state.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>style</td>\\n                            <td>string</td>\\n                            <td>null</td>\\n                            <td>Inline style of the element.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>styleClass</td>\\n                            <td>string</td>\\n                            <td>null</td>\\n                            <td>Style class of the element.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>disabled</td>\\n                            <td>boolean</td>\\n                            <td>false</td>\\n                            <td>When present, it specifies that the element should be disabled.</td>\\n                        </tr>\\n                        <tr>\\n                          <td>tabindex</td>\\n                          <td>number</td>\\n                          <td>null</td>\\n                          <td>Index of the element in tabbing order.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>inputId</td>\\n                            <td>string</td>\\n                            <td>null</td>\\n                            <td>Identifier of the focus input to match a label defined for the component.</td>\\n                        </tr>\\n                    </tbody>\\n                </table>\\n            </div>\\n\\n            <h3>Events</h3>\\n            <div class=\\\"doc-tablewrapper\\\">\\n                <table class=\\\"doc-table\\\">\\n                    <thead>\\n                        <tr>\\n                            <th>Name</th>\\n                            <th>Parameters</th>\\n                            <th>Description</th>\\n                        </tr>\\n                    </thead>\\n                    <tbody>\\n                        <tr>\\n                            <td>onChange</td>\\n                            <td>event.originalEvent: browser event <br>\\n                                evebt.checked: boolean value to represent checked state.</td>\\n                            <td>Callback to invoke on state change.</td>\\n                        </tr>\\n                    </tbody>\\n                </table>\\n            </div>\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;p-toggleButton (onChange)=\\\"handleChange($event)\\\" [(ngModel)]=\\\"val\\\"&gt;\\n</code>\\n</pre>\\n <pre>\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\nexport class ModelComponent &#123;\\n\\n    handleChange(e) &#123;\\n        var isChecked = e.checked;\\n    &#125;\\n&#125;\\n</code>\\n</pre>\\n\\n            <h3>Styling</h3>\\n            <p>Following is the list of structural style classes, for theming classes visit <a href=\\\"#\\\" [routerLink]=\\\"['/theming']\\\">theming page</a>.</p>\\n            <div class=\\\"doc-tablewrapper\\\">\\n                <table class=\\\"doc-table\\\">\\n                    <thead>\\n                        <tr>\\n                            <th>Name</th>\\n                            <th>Element</th>\\n                        </tr>\\n                    </thead>\\n                    <tbody>\\n                        <tr>\\n                            <td>ui-togglebutton</td>\\n                            <td>Container element</td>\\n                        </tr>\\n                        <tr>\\n                            <td>ui-button-icon-left</td>\\n                            <td>Icon element.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>ui-button-text</td>\\n                            <td>Label element.</td>\\n                        </tr>\\n                    </tbody>\\n                </table>\\n            </div>\\n\\n            <h3>Dependencies</h3>\\n            <p>None.</p>\\n        </p-tabPanel>\\n\\n        <p-tabPanel header=\\\"Source\\\">\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/togglebutton\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\n                <i class=\\\"fa fa-github\\\"></i>\\n                <span>View on GitHub</span>\\n            </a>\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;h3 class=\\\"first\\\"&gt;Basic - ({{checked1}})&lt;/h3&gt;\\n&lt;p-toggleButton [(ngModel)]=\\\"checked1\\\" [style]=\\\"&#123;'width':'150px'&#125;\\\"&gt;&lt;/p-toggleButton&gt;\\n\\n&lt;h3&gt;Customized - ({{checked2}})&lt;/h3&gt;\\n&lt;p-toggleButton [(ngModel)]=\\\"checked2\\\" onLabel=\\\"I confirm\\\" offLabel=\\\"I reject\\\" onIcon=\\\"fa-check-square\\\" offIcon=\\\"fa-square\\\" [style]=\\\"&#123;'width':'150px'&#125;\\\"&gt;&lt;/p-toggleButton&gt;\\n</code>\\n</pre>\\n\\n<pre>\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\nexport class ToggleButtonDemo &#123;\\n\\n    checked1: boolean = false;\\n\\n    checked2: boolean = true;\\n&#125;\\n</code>\\n</pre>\\n        </p-tabPanel>\\n    </p-tabView>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/showcase/components/togglebutton/togglebuttondemo.html\n// module id = ./src/app/showcase/components/togglebutton/togglebuttondemo.html\n// module chunks = togglebuttondemo.module","import {NgModule}     from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormsModule}  from '@angular/forms';\nimport {ToggleButtonDemo} from './togglebuttondemo';\nimport {ToggleButtonDemoRoutingModule} from './togglebuttondemo-routing.module';\nimport {ToggleButtonModule} from '../../../components/togglebutton/togglebutton';\nimport {TabViewModule} from '../../../components/tabview/tabview';\nimport {CodeHighlighterModule} from '../../../components/codehighlighter/codehighlighter';\n\n@NgModule({\n\timports: [\n\t\tCommonModule,\n        FormsModule,\n\t\tToggleButtonDemoRoutingModule,\n        ToggleButtonModule,\n        TabViewModule,\n        CodeHighlighterModule\n\t],\n\tdeclarations: [\n\t\tToggleButtonDemo\n\t]\n})\nexport class ToggleButtonDemoModule {}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/showcase/components/togglebutton/togglebuttondemo.module.ts","import {Component} from '@angular/core';\n\n@Component({\n    templateUrl: './togglebuttondemo.html'\n})\nexport class ToggleButtonDemo {\n    \n    checked1: boolean = false;\n\n    checked2: boolean = true;\n}\n\n\n// WEBPACK FOOTER //\n// ./src/app/showcase/components/togglebutton/togglebuttondemo.ts"],"sourceRoot":"webpack:///"}