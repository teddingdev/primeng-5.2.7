webpackJsonp(["dropdowndemo.module"],{

/***/ "./src/app/showcase/components/dropdown/dropdowndemo-routing.module.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return DropdownDemoRoutingModule; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_router__ = __webpack_require__("./node_modules/@angular/router/esm5/router.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__dropdowndemo__ = __webpack_require__("./src/app/showcase/components/dropdown/dropdowndemo.ts");
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};



var DropdownDemoRoutingModule = (function () {
    function DropdownDemoRoutingModule() {
    }
    DropdownDemoRoutingModule = __decorate([
        Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["J" /* NgModule */])({
            imports: [
                __WEBPACK_IMPORTED_MODULE_1__angular_router__["b" /* RouterModule */].forChild([
                    { path: '', component: __WEBPACK_IMPORTED_MODULE_2__dropdowndemo__["a" /* DropdownDemo */] }
                ])
            ],
            exports: [
                __WEBPACK_IMPORTED_MODULE_1__angular_router__["b" /* RouterModule */]
            ]
        })
    ], DropdownDemoRoutingModule);
    return DropdownDemoRoutingModule;
}());



/***/ }),

/***/ "./src/app/showcase/components/dropdown/dropdowndemo.html":
/***/ (function(module, exports) {

module.exports = "<div class=\"content-section introduction\">\n    <div>\n        <span class=\"feature-title\">Dropdown</span>\n        <span>Dropdown is used to select an item from a collection of options. Custom content support and filtering are the notable features.</span>\n    </div>\n</div>\n\n<div class=\"content-section implementation\">\n    <h3 class=\"first\">Single</h3>\n    <p-dropdown [options]=\"cities\" [(ngModel)]=\"selectedCity\" placeholder=\"Select a City\" optionLabel=\"name\" [showClear]=\"true\"></p-dropdown>\n    <p>Selected City: {{selectedCity ? selectedCity.name : 'none'}}</p>\n    \n    <h3>Editable</h3>\n    <p-dropdown [options]=\"cars\" [(ngModel)]=\"selectedCar1\" [style]=\"{'width':'150px'}\" editable=\"true\" placeholder=\"Select a Brand\"></p-dropdown>\n    <p>Selected Car: {{selectedCar1 || 'none'}}</p>\n    \n    <h3>Content with Filters</h3>\n    <p-dropdown [options]=\"cars\" [(ngModel)]=\"selectedCar2\" [style]=\"{'width':'150px'}\" filter=\"true\">\n        <ng-template let-item pTemplate=\"selectedItem\">\n            <img src=\"assets/showcase/images/demo/car/{{item.label}}.png\" style=\"width:16px;vertical-align:middle\" />\n            <span style=\"vertical-align:middle\">{{item.label}}</span>\n        </ng-template>\n        <ng-template let-car pTemplate=\"item\">\n            <div class=\"ui-helper-clearfix\" style=\"position: relative;height: 25px;\">\n                <img src=\"assets/showcase/images/demo/car/{{car.label}}.png\" style=\"width:24px;position:absolute;top:1px;left:5px\"/>\n                <div style=\"font-size:14px;float:right;margin-top:4px\">{{car.label}}</div>\n            </div>\n        </ng-template>\n    </p-dropdown>\n    <p>Selected Car: {{selectedCar2||'none'}}</p>\n\n    <h3>Group</h3>\n    <p-dropdown [options]=\"groupedCars\" [(ngModel)]=\"selectedCar3\" [style]=\"{'width':'150px'}\" placeholder=\"Select a Car\" [group]=\"true\">\n        <ng-template let-group pTemplate=\"group\">\n            <img src=\"assets/showcase/images/demo/flag/{{group.value}}\" style=\"width:20px;vertical-align:middle\" />\n            <span style=\"vertical-align:middle\">{{group.label}}</span>\n        </ng-template>\n    </p-dropdown>\n    <p>Selected Car: {{selectedCar3 || 'none'}}</p>\n</div>\n\n<div class=\"content-section documentation\">\n    <p-tabView effect=\"fade\">\n        <p-tabPanel header=\"Documentation\">\n            <h3>Import</h3>\n<pre>\n<code class=\"language-typescript\" pCode ngNonBindable>\nimport &#123;DropdownModule&#125; from 'primeng/dropdown';\n</code>\n</pre>\n\n            <h3>Getting Started</h3>\n            <p>Dropdown requires a value to bind and a collection of options. There are two alternatives of how to define the options property; one way is providing a collection of SelectItem\n            instances whereas other way is providing an array of arbitrary objects along with the optionLabel property to specify the field name of the option. SelectItem API is designed to have more control on how \n            the options are displayed such as grouping and disabling however in most cases an arbitrary object collection will suffice. Example below demonstrates both cases.</p>\n<pre>\n<code class=\"language-markup\" pCode ngNonBindable>\n&lt;p-dropdown [options]=\"cities1\" [(ngModel)]=\"selectedCity1\"&gt;&lt;/p-dropdown&gt;\n\n&lt;p-dropdown [options]=\"cities2\" [(ngModel)]=\"selectedCity2\" optionLabel=\"name\"&gt;&lt;/p-dropdown&gt;\n</code>\n</pre>\n\n<pre>\n<code class=\"language-typescript\" pCode ngNonBindable>\nimport &#123;SelectItem&#125; from 'primeng/api';\n\ninterface City &#123;\n  name: string;\n  code: string;\n&#125;\n\nexport class MyModel &#123;\n\n    cities1: SelectItem[];\n    \n    cities2: City[];\n\n    selectedCity1: City;\n    \n    selectedCity2: City;\n\n    constructor() &#123;\n        //SelectItem API with label-value pairs\n        this.cities1 = [\n            &#123;label:'Select City', value:null&#125;,\n            &#123;label:'New York', value:&#123;id:1, name: 'New York', code: 'NY'&#125;&#125;,\n            &#123;label:'Rome', value:&#123;id:2, name: 'Rome', code: 'RM'&#125;&#125;,\n            &#123;label:'London', value:&#123;id:3, name: 'London', code: 'LDN'&#125;&#125;,\n            &#123;label:'Istanbul', value:&#123;id:4, name: 'Istanbul', code: 'IST'&#125;&#125;,\n            &#123;label:'Paris', value:&#123;id:5, name: 'Paris', code: 'PRS'&#125;&#125;\n        ];\n        \n        //An array of cities\n        this.cities2 = [\n            &#123;name: 'New York', code: 'NY'&#125;,\n            &#123;name: 'Rome', code: 'RM'&#125;,\n            &#123;name: 'London', code: 'LDN'&#125;,\n            &#123;name: 'Istanbul', code: 'IST'&#125;,\n            &#123;name: 'Paris', code: 'PRS'&#125;\n        ];\n    &#125;\n\n&#125;\n</code>\n</pre>\n\n            <h3>Model Driven Forms</h3>\n            <p>Dropdown can be used in a model driven form as well.</p>\n<pre>\n<code class=\"language-markup\" pCode ngNonBindable>\n&lt;p-dropdown [options]=\"cities\" formControlName=\"selectedCity\"&gt;&lt;/p-dropdown&gt;\n</code>\n</pre>\n\n            <h3>Filtering</h3>\n            <p>Options can be filtered using an input field in the overlay by enabling the filter property. By default filtering is done against\n                label of the SelectItem and filterBy property is available to choose one or more properties of the SelectItem API.</p>\n<pre>\n<code class=\"language-markup\" pCode ngNonBindable>\n&lt;p-dropdown [options]=\"cities\" [(ngModel)]=\"selectedCity\" [filter]=\"true\"&gt;&lt;/p-dropdown&gt;\n&lt;p-dropdown [options]=\"cities\" [(ngModel)]=\"selectedCity\" [filter]=\"true\" filterBy=\"label,value.name\"&gt;&lt;/p-dropdown&gt;\n</code>\n</pre>\n\n            <h3>Grouping</h3>\n            <p>Displaying options as grouped is enabled by providing a collection of SelectItemGroup instances and setting group property to true.</p>\n<pre>\n<code class=\"language-markup\" pCode ngNonBindable>\n&lt;p-dropdown [options]=\"groupedCars\" [(ngModel)]=\"selectedCar\" placeholder=\"Select a Car\" [group]=\"true\"&gt;&lt;/p-dropdown&gt;\n</code>\n</pre>\n\n\n<pre>\n<code class=\"language-typescript\" pCode ngNonBindable>\nimport &#123;SelectItem&#125; from 'primeng/api';\nimport &#123;SelectItemGroup&#125; from 'primeng/api';\n\nexport class GroupDemo &#123;\n    \n    selectedCar: string;\n\n    groupedCars: SelectItemGroup[];\n\n    constructor() &#123;\n        this.groupedCars = [\n            &#123;\n                label: 'Germany', \n                items: [\n                    &#123;label: 'Audi', value: 'Audi'&#125;,\n                    &#123;label: 'BMW', value: 'BMW'&#125;,\n                    &#123;label: 'Mercedes', value: 'Mercedes'&#125;\n                ]\n            &#125;,\n            &#123;\n                label: 'USA', \n                items: [\n                    &#123;label: 'Cadillac', value: 'Cadillac'&#125;,\n                    &#123;label: 'Ford', value: 'Ford'&#125;,\n                    &#123;label: 'GMC', value: 'GMC'&#125;\n                ]\n            &#125;,\n            &#123;\n                label: 'Japan', \n                items: [\n                    &#123;label: 'Honda', value: 'Honda'&#125;,\n                    &#123;label: 'Toyota', value: 'Toyota'&#125;\n                ]\n            &#125;\n        ];\n    &#125;\n&#125;\n</code>\n</pre>\n\n            <h3>Custom Content</h3>\n            <p>Both the selected option and the options list can be templated to provide customization on the default behavior which is displaying label property of an option. Use\n                \"selectedItem\" template to customize the selected label display and the \"item\" template to change the content of the options in the dropdown panel. In addition when grouping is enabled, \"group\" template is available \n                to customize the option groups. All templates get the option instance as the default local template variable. \n            </p>\n<pre>\n<code class=\"language-markup\" pCode ngNonBindable>\n&lt;p-dropdown [options]=\"cars\" [(ngModel)]=\"selectedCar\" [style]=\"&#123;'width':'150px'&#125;\"&gt;\n     &lt;ng-template let-item pTemplate=\"selectedItem\"&gt; \n        &lt;img src=\"assets/showcase/images/demo/car/&#123;&#123;item.label&#125;&#125;.png\" style=\"width:16px;vertical-align:middle\" /&gt; \n        &lt;span style=\"vertical-align:middle\"&gt;&#123;&#123;item.label&#125;&#125;&lt;/span&gt;\n    &lt;/ng-template&gt; \n    &lt;ng-template let-car pTemplate=\"item\"&gt; \n        &lt;div class=\"ui-helper-clearfix\" style=\"position: relative;height:25px;\"&gt;\n        &lt;img src=\"assets/showcase/images/demo/car/&#123;&#123;car.label&#125;&#125;.png\" style=\"width:24px;position:absolute;top:1px;left:5px\"/&gt; \n        &lt;div style=\"font-size:14px;float:right;margin-top:4px\"&gt;&#123;&#123;car.label&#125;&#125;&lt;/div&gt; &lt;/div&gt;\n    &lt;/ng-template&gt;\n&lt;/p-dropdown&gt;\n</code>\n</pre>\n\n<pre>\n<code class=\"language-typescript\" pCode ngNonBindable>\nimport &#123;SelectItem&#125; from 'primeng/api';\n\nexport class MyModel &#123;\n\n    cars: SelectItem[];\n\n    selectedCar: string;\n\n    constructor() &#123;\n        this.cars = [\n            &#123;label: 'Audi', value: 'Audi'&#125;,\n            &#123;label: 'BMW', value: 'BMW'&#125;,\n            &#123;label: 'Fiat', value: 'Fiat'&#125;,\n            &#123;label: 'Ford', value: 'Ford'&#125;,\n            &#123;label: 'Honda', value: 'Honda'&#125;,\n            &#123;label: 'Jaguar', value: 'Jaguar'&#125;,\n            &#123;label: 'Mercedes', value: 'Mercedes'&#125;,\n            &#123;label: 'Renault', value: 'Renault'&#125;,\n            &#123;label: 'VW', value: 'VW'&#125;,\n            &#123;label: 'Volvo', value: 'Volvo'&#125;,\n        ];\n    &#125;\n&#125;\n</code>\n</pre>\n\n            <h3>Properties</h3>\n            <div class=\"doc-tablewrapper\">\n                <table class=\"doc-table\">\n                    <thead>\n                        <tr>\n                            <th>Name</th>\n                            <th>Type</th>\n                            <th>Default</th>\n                            <th>Description</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr>\n                            <td>options</td>\n                            <td>array</td>\n                            <td>null</td>\n                            <td>An array of objects to display as the available options.</td>\n                        </tr>\n                        <tr>\n                            <td>optionLabel</td>\n                            <td>string</td>\n                            <td>null</td>\n                            <td>Name of the label field of an option when an arbitrary objects instead of SelectItems are used as options.</td>\n                        </tr>\n                        <tr>\n                            <td>name</td>\n                            <td>string</td>\n                            <td>null</td>\n                            <td>Name of the input element.</td>\n                        </tr>\n                        <tr>\n                            <td>scrollHeight</td>\n                            <td>string</td>\n                            <td>200px</td>\n                            <td>Height of the viewport in pixels, a scrollbar is defined if height of list exceeds this value.</td>\n                        </tr>\n                        <tr>\n                            <td>style</td>\n                            <td>string</td>\n                            <td>null</td>\n                            <td>Inline style of the element.</td>\n                        </tr>\n                        <tr>\n                            <td>panelStyle</td>\n                            <td>string</td>\n                            <td>null</td>\n                            <td>Inline style of the overlay panel element.</td>\n                        </tr>\n                        <tr>\n                            <td>styleClass</td>\n                            <td>string</td>\n                            <td>null</td>\n                            <td>Style class of the element.</td>\n                        </tr>\n                        <tr>\n                            <td>panelStyleClass</td>\n                            <td>string</td>\n                            <td>null</td>\n                            <td>Style class of the overlay panel element.</td>\n                        </tr>\n                        <tr>\n                            <td>filter</td>\n                            <td>boolean</td>\n                            <td>false</td>\n                            <td>When specified, displays an input field to filter the items on keyup.</td>\n                        </tr>\n                        <tr>\n                            <td>filterBy</td>\n                            <td>string</td>\n                            <td>null</td>\n                            <td>When filtering is enabled, filterBy decides which field or fields (comma separated) to search against.</td>\n                        </tr>\n                        <tr>\n                            <td>filterPlaceholder</td>\n                            <td>string</td>\n                            <td>null</td>\n                            <td>Placeholder text to show when filter input is empty.</td>\n                        </tr>\n                        <tr>\n                            <td>autoWidth</td>\n                            <td>boolean</td>\n                            <td>true</td>\n                            <td>Calculates the width based on options width, set to false for custom width.</td>\n                        </tr>\n                        <tr>\n                            <td>required</td>\n                            <td>boolean</td>\n                            <td>false</td>\n                            <td>When present, it specifies that an input field must be filled out before submitting the form.</td>\n                        </tr>\n                        <tr>\n                            <td>disabled</td>\n                            <td>boolean</td>\n                            <td>false</td>\n                            <td>When present, it specifies that the component should be disabled.</td>\n                        </tr>\n                        <tr>\n                            <td>editable</td>\n                            <td>boolean</td>\n                            <td>false</td>\n                            <td>When present, custom value instead of predefined options can be entered using the editable input field.</td>\n                        </tr>\n                        <tr>\n                            <td>appendTo</td>\n                            <td>any</td>\n                            <td>null</td>\n                            <td>Target element to attach the overlay, valid values are \"body\" or a local ng-template variable of another element.</td>\n                        </tr>\n                        <tr>\n                            <td>tabindex</td>\n                            <td>number</td>\n                            <td>null</td>\n                            <td>Index of the element in tabbing order.</td>\n                        </tr>\n                        <tr>\n                            <td>placeholder</td>\n                            <td>string</td>\n                            <td>null</td>\n                            <td>Default text to display when no option is selected.</td>\n                        </tr>\n                        <tr>\n                            <td>inputId</td>\n                            <td>string</td>\n                            <td>null</td>\n                            <td>Identifier of the focus input to match a label defined for the dropdown.</td>\n                        </tr>\n                        <tr>\n                            <td>dataKey</td>\n                            <td>string</td>\n                            <td>null</td>\n                            <td>A property to uniquely identify a value in options.</td>\n                        </tr>\n                        <tr>\n                            <td>lazy</td>\n                            <td>boolean</td>\n                            <td>true</td>\n                            <td>When enabled, creates the dom for options when overlay panel gets visible.</td>\n                        </tr>\n                        <tr>\n                            <td>autofocus</td>\n                            <td>boolean</td>\n                            <td>false</td>\n                            <td>When present, it specifies that the component should automatically get focus on load.</td>\n                        </tr>\n                        <tr>\n                            <td>resetFilterOnHide</td>\n                            <td>boolean</td>\n                            <td>false</td>\n                            <td>Clears the filter value when hiding the dropdown.</td>\n                        </tr>\n                        <tr>\n                            <td>dropdownIcon</td>\n                            <td>string</td>\n                            <td>fa fa-fw fa-caret-down</td>\n                            <td>Icon class of the dropdown icon.</td>\n                        </tr>\n                        <tr>\n                            <td>emptyFilterMessage</td>\n                            <td>string</td>\n                            <td>No results found</td>\n                            <td>Text to display when filtering does not return any results.</td>\n                        </tr>\n                        <tr>\n                            <td>autoDisplayFirst</td>\n                            <td>boolean</td>\n                            <td>true</td>\n                            <td>Whether to display the first item as the label if no placeholder is defined and value is null.</td>\n                        </tr>\n                        <tr>\n                            <td>group</td>\n                            <td>boolean</td>\n                            <td>false</td>\n                            <td>Whether to display options as grouped when nested options are provided.</td>\n                        </tr>\n                        <tr>\n                            <td>showClear</td>\n                            <td>boolean</td>\n                            <td>false</td>\n                            <td>When enabled, a clear icon is displayed to clear the value.</td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n\n            <h3>Events</h3>\n            <div class=\"doc-tablewrapper\">\n                <table class=\"doc-table\">\n                    <thead>\n                    <tr>\n                        <th>Name</th>\n                        <th>Parameters</th>\n                        <th>Description</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                        <tr>\n                            <td>onClick</td>\n                            <td>event: Click event</td>\n                            <td>Callback to invoke when component is clicked.</td>\n                        </tr>\n                        <tr>\n                            <td>onChange</td>\n                            <td>event.originalEvent: Browser event<br />\n                                event.value: Selected option value\n                            </td>\n                            <td>Callback to invoke when value of dropdown changes.</td>\n                        </tr>\n                        <tr>\n                            <td>onFocus</td>\n                            <td>event: Browser event</td>\n                            <td>Callback to invoke when dropdown gets focus.</td>\n                        </tr>\n                        <tr>\n                            <td>onBlur</td>\n                            <td>event: Browser event</td>\n                            <td>Callback to invoke when dropdown loses focus.</td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n            \n            <h3>Methods</h3>\n            <div class=\"doc-tablewrapper\">\n                <table class=\"doc-table\">\n                    <thead>\n                        <tr>\n                            <th>Name</th>\n                            <th>Parameters</th>\n                            <th>Description</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr>\n                            <td>resetFilter</td>\n                            <td>-</td>\n                            <td>Resets filtering.</td>\n                        </tr>\n                        <tr>\n                            <td>focus</td>\n                            <td>-</td>\n                            <td>Applies focus.</td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n            \n<pre>\n<code class=\"language-markup\" pCode ngNonBindable>\n&lt;p-dropdown #dd [options]=\"cars\" [(ngModel)]=\"selectedCar\" filter=\"true\"&gt;&lt;/p-dropdown&gt;\n&lt;button type=\"button\" pButton label=\"Clear\" (click)=\"clearFilter(dd)\"&gt;&lt;/button&gt;\n</code>\n</pre>\n\n<pre>\n<code class=\"language-typescript\" pCode ngNonBindable>\nclearFilter(dropdown: Dropdown) &#123;\n    dropdown.resetFilter();\n&#125;\n</code>\n</pre>\n\n            <h3>Styling</h3>\n            <p>Following is the list of structural style classes, for theming classes visit <a href=\"#\" [routerLink]=\"['/theming']\">theming page</a>.</p>\n            <div class=\"doc-tablewrapper\">\n                <table class=\"doc-table\">\n                    <thead>\n                        <tr>\n                            <th>Name</th>\n                            <th>Element</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr>\n                            <td>ui-dropdown</td>\n                            <td>Container element.</td>\n                        </tr>\n                        <tr>\n                            <td>ui-dropdown-clearable</td>\n                            <td>Container element when showClear is on.</td>\n                        </tr>\n                        <tr>\n                            <td>ui-dropdown-label</td>\n                            <td>Element to display label of selected option.</td>\n                        </tr>\n                        <tr>\n                            <td>ui-dropdown-trigger</td>\n                            <td>Icon element.</td>\n                        </tr>\n                        <tr>\n                            <td>ui-dropdown-panel</td>\n                            <td>Icon element.</td>\n                        </tr>\n                        <tr>\n                            <td>ui-dropdown-items-wrapper</td>\n                            <td>Wrapper element of items list.</td>\n                        </tr>\n                        <tr>\n                            <td>ui-dropdown-items</td>\n                            <td>List element of items.</td>\n                        </tr>\n                        <tr>\n                            <td>ui-dropdown-item</td>\n                            <td>An item in the list.</td>\n                        </tr>\n                        <tr>\n                            <td>ui-dropdown-filter-container</td>\n                            <td>Container of filter input.</td>\n                        </tr>\n                        <tr>\n                            <td>ui-dropdown-filter</td>\n                            <td>Filter element.</td>\n                        </tr>\n                        <tr>\n                            <td>ui-dropdown-open</td>\n                            <td>Container element when overlay is visible.</td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n\n            <h3>Dependencies</h3>\n            <p>None.</p>\n        </p-tabPanel>\n\n        <p-tabPanel header=\"Source\">\n            <a href=\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/dropdown\" class=\"btn-viewsource\" target=\"_blank\">\n                <i class=\"fa fa-github\"></i>\n                <span>View on GitHub</span>\n            </a>\n<pre>\n<code class=\"language-markup\" pCode ngNonBindable>\n&lt;h3 class=\"first\"&gt;Single&lt;/h3&gt;\n&lt;p-dropdown [options]=\"cities\" [(ngModel)]=\"selectedCity\" placeholder=\"Select a City\" optionLabel=\"name\" [showClear]=\"true\"&gt;&lt;/p-dropdown&gt;\n&lt;p&gt;Selected City: &#123;&#123;selectedCity ? selectedCity.name : 'none'&#125;&#125;&lt;/p&gt;\n\n&lt;h3&gt;Editable&lt;/h3&gt;\n&lt;p-dropdown [options]=\"cars\" [(ngModel)]=\"selectedCar1\" [style]=\"&#123;'width':'150px'&#125;\" editable=\"true\" placeholder=\"Select a Brand\"&gt;&lt;/p-dropdown&gt;\n&lt;p&gt;Selected Car: &#123;&#123;selectedCar1 || 'none'&#125;&#125;&lt;/p&gt;\n\n&lt;h3&gt;Content with Filters&lt;/h3&gt;\n&lt;p-dropdown [options]=\"cars\" [(ngModel)]=\"selectedCar2\" [style]=\"&#123;'width':'150px'&#125;\" filter=\"true\"&gt;\n    &lt;ng-template let-item pTemplate=\"selectedItem\"&gt;\n        &lt;img src=\"assets/showcase/images/demo/car/&#123;&#123;item.label&#125;&#125;.png\" style=\"width:16px;vertical-align:middle\" /&gt;\n        &lt;span style=\"vertical-align:middle\"&gt;&#123;&#123;item.label&#125;&#125;&lt;/span&gt;\n    &lt;/ng-template&gt;\n    &lt;ng-template let-car pTemplate=\"item\"&gt;\n        &lt;div class=\"ui-helper-clearfix\" style=\"position: relative;height: 25px;\"&gt;\n            &lt;img src=\"assets/showcase/images/demo/car/&#123;&#123;car.label&#125;&#125;.png\" style=\"width:24px;position:absolute;top:1px;left:5px\"/&gt;\n            &lt;div style=\"font-size:14px;float:right;margin-top:4px\"&gt;&#123;&#123;car.label&#125;&#125;&lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/ng-template&gt;\n&lt;/p-dropdown&gt;\n&lt;p&gt;Selected Car: &#123;&#123;selectedCar2||'none'&#125;&#125;&lt;/p&gt;\n\n&lt;h3&gt;Group&lt;/h3&gt;\n&lt;p-dropdown [options]=\"groupedCars\" [(ngModel)]=\"selectedCar3\" [style]=\"&#123;'width':'150px'&#125;\" placeholder=\"Select a Car\" [group]=\"true\"&gt;\n    &lt;ng-template let-group pTemplate=\"group\"&gt;\n        &lt;img src=\"assets/showcase/images/demo/flag/&#123;&#123;group.value&#125;&#125;\" style=\"width:20px;vertical-align:middle\" /&gt;\n        &lt;span style=\"vertical-align:middle\"&gt;&#123;&#123;group.label&#125;&#125;&lt;/span&gt;\n    &lt;/ng-template&gt;\n&lt;/p-dropdown&gt;\n</code>\n</pre>\n\n<pre>\n<code class=\"language-typescript\" pCode ngNonBindable>\nexport class DropdownDemo &#123;\n\n    cities: City[];\n\n    selectedCity: City;\n\n    cars: SelectItem[];\n\n    selectedCar1: string;\n\n    selectedCar2: string = 'BMW';\n    \n    selectedCar3: string;\n\n    groupedCars: SelectItemGroup[];\n\n    constructor() &#123;\n        this.cities = [\n            &#123;name: 'New York', code: 'NY'&#125;,\n            &#123;name: 'Rome', code: 'RM'&#125;,\n            &#123;name: 'London', code: 'LDN'&#125;,\n            &#123;name: 'Istanbul', code: 'IST'&#125;,\n            &#123;name: 'Paris', code: 'PRS'&#125;\n        ];\n\n        this.cars = [\n            &#123;label: 'Audi', value: 'Audi'&#125;,\n            &#123;label: 'BMW', value: 'BMW'&#125;,\n            &#123;label: 'Fiat', value: 'Fiat'&#125;,\n            &#123;label: 'Ford', value: 'Ford'&#125;,\n            &#123;label: 'Honda', value: 'Honda'&#125;,\n            &#123;label: 'Jaguar', value: 'Jaguar'&#125;,\n            &#123;label: 'Mercedes', value: 'Mercedes'&#125;,\n            &#123;label: 'Renault', value: 'Renault'&#125;,\n            &#123;label: 'VW', value: 'VW'&#125;,\n            &#123;label: 'Volvo', value: 'Volvo'&#125;\n        ];\n\n        this.groupedCars = [\n            &#123;\n                label: 'Germany', value: 'germany.png', \n                items: [\n                    &#123;label: 'Audi', value: 'Audi'&#125;,\n                    &#123;label: 'BMW', value: 'BMW'&#125;,\n                    &#123;label: 'Mercedes', value: 'Mercedes'&#125;\n                ]\n            &#125;,\n            &#123;\n                label: 'USA', value: 'usa.png', \n                items: [\n                    &#123;label: 'Cadillac', value: 'Cadillac'&#125;,\n                    &#123;label: 'Ford', value: 'Ford'&#125;,\n                    &#123;label: 'GMC', value: 'GMC'&#125;\n                ]\n            &#125;,\n            &#123;\n                label: 'Japan', value: 'japan.png', \n                items: [\n                    &#123;label: 'Honda', value: 'Honda'&#125;,\n                    &#123;label: 'Toyota', value: 'Toyota'&#125;\n                ]\n            &#125;\n        ];\n    &#125;\n&#125;\n</code>\n</pre>\n        </p-tabPanel>\n    </p-tabView>\n</div>\n"

/***/ }),

/***/ "./src/app/showcase/components/dropdown/dropdowndemo.module.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DropdownDemoModule", function() { return DropdownDemoModule; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_common__ = __webpack_require__("./node_modules/@angular/common/esm5/common.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__angular_forms__ = __webpack_require__("./node_modules/@angular/forms/esm5/forms.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__dropdowndemo__ = __webpack_require__("./src/app/showcase/components/dropdown/dropdowndemo.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__dropdowndemo_routing_module__ = __webpack_require__("./src/app/showcase/components/dropdown/dropdowndemo-routing.module.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__components_dropdown_dropdown__ = __webpack_require__("./src/app/components/dropdown/dropdown.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__components_tabview_tabview__ = __webpack_require__("./src/app/components/tabview/tabview.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__components_codehighlighter_codehighlighter__ = __webpack_require__("./src/app/components/codehighlighter/codehighlighter.ts");
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};








var DropdownDemoModule = (function () {
    function DropdownDemoModule() {
    }
    DropdownDemoModule = __decorate([
        Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["J" /* NgModule */])({
            imports: [
                __WEBPACK_IMPORTED_MODULE_1__angular_common__["b" /* CommonModule */],
                __WEBPACK_IMPORTED_MODULE_2__angular_forms__["c" /* FormsModule */],
                __WEBPACK_IMPORTED_MODULE_4__dropdowndemo_routing_module__["a" /* DropdownDemoRoutingModule */],
                __WEBPACK_IMPORTED_MODULE_5__components_dropdown_dropdown__["a" /* DropdownModule */],
                __WEBPACK_IMPORTED_MODULE_6__components_tabview_tabview__["a" /* TabViewModule */],
                __WEBPACK_IMPORTED_MODULE_7__components_codehighlighter_codehighlighter__["a" /* CodeHighlighterModule */]
            ],
            declarations: [
                __WEBPACK_IMPORTED_MODULE_3__dropdowndemo__["a" /* DropdownDemo */]
            ]
        })
    ], DropdownDemoModule);
    return DropdownDemoModule;
}());



/***/ }),

/***/ "./src/app/showcase/components/dropdown/dropdowndemo.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return DropdownDemo; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

var DropdownDemo = (function () {
    function DropdownDemo() {
        this.selectedCar2 = 'BMW';
        this.cities = [
            { name: 'New York', code: 'NY' },
            { name: 'Rome', code: 'RM' },
            { name: 'London', code: 'LDN' },
            { name: 'Istanbul', code: 'IST' },
            { name: 'Paris', code: 'PRS' }
        ];
        this.cars = [
            { label: 'Audi', value: 'Audi' },
            { label: 'BMW', value: 'BMW' },
            { label: 'Fiat', value: 'Fiat' },
            { label: 'Ford', value: 'Ford' },
            { label: 'Honda', value: 'Honda' },
            { label: 'Jaguar', value: 'Jaguar' },
            { label: 'Mercedes', value: 'Mercedes' },
            { label: 'Renault', value: 'Renault' },
            { label: 'VW', value: 'VW' },
            { label: 'Volvo', value: 'Volvo' }
        ];
        this.groupedCars = [
            {
                label: 'Germany', value: 'germany.png',
                items: [
                    { label: 'Audi', value: 'Audi' },
                    { label: 'BMW', value: 'BMW' },
                    { label: 'Mercedes', value: 'Mercedes' }
                ]
            },
            {
                label: 'USA', value: 'usa.png',
                items: [
                    { label: 'Cadillac', value: 'Cadillac' },
                    { label: 'Ford', value: 'Ford' },
                    { label: 'GMC', value: 'GMC' }
                ]
            },
            {
                label: 'Japan', value: 'japan.png',
                items: [
                    { label: 'Honda', value: 'Honda' },
                    { label: 'Toyota', value: 'Toyota' }
                ]
            }
        ];
    }
    DropdownDemo = __decorate([
        Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["n" /* Component */])({
            template: __webpack_require__("./src/app/showcase/components/dropdown/dropdowndemo.html"),
        }),
        __metadata("design:paramtypes", [])
    ], DropdownDemo);
    return DropdownDemo;
}());



/***/ })

});
//# sourceMappingURL=dropdowndemo.module.chunk.js.map